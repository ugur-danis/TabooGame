@inject NavigationManager navigationManager
@page "/"
@page "/Game"

<div class="wrapper">
    @if (_screens == Screens.LOGIN)
    {
        <div id="login">
            <input type="text" placeholder="Player Name" @bind="_player.Name">
            <input type="number" placeholder="Lobby ID" @bind="_lobby.ID">
            <button @onclick="async () => await Play()">PLAY</button>
        </div>
    }
    else if (_screens == Screens.LOBBY)
    {
        <div id="lobby">
            <button id="back-btn" @onclick="async () => await LeaveLobby()">GO TO BACK</button>
            <div id="lobby-settings">
                <fieldset>
                    <legend>Game Options</legend>
                    @if (_player.ID == _lobby.Admin.ID)
                    {
                        <div class="lobby-setting">
                            <span>LOBBY ID</span>
                            <span>@_lobby.ID</span>
                        </div>
                    }
                    <div class="lobby-setting">
                        <span>Number of win</span>
                        @if (_player.ID == _lobby.Admin.ID)
                        {
                            <select @onchange="async (ChangeEventArgs args) => { _lobby.Game.NumberOfWin = Convert.ToInt32(args.Value); await UpdateGameSetting(); }">
                                @foreach (var value in GameConfig.SelectNumberOfWin)
                                {
                                    if (value == GameConfig.SelectNumberOfWin[GameConfig.DefaultNumberOfWinIndex])
                                    {
                                        <option value="@value" selected>@value</option>
                                    }
                                    else
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        }
                        else
                        {
                            <span>@_lobby.Game.NumberOfWin</span>
                        }
                    </div>
                    <div class="lobby-setting">
                        <span>Remaining Pass</span>
                        @if (_player.ID == _lobby.Admin.ID)
                        {
                            <select @onchange="async (ChangeEventArgs args) => { _lobby.Game.RemainingPass = Convert.ToInt32(args.Value); await UpdateGameSetting(); }">
                                @foreach (var value in GameConfig.SelectRightToPass)
                                {
                                    if (value == GameConfig.SelectRightToPass[GameConfig.DefaultRightToPassIndex])
                                    {
                                        <option value="@value" selected>@value</option>
                                    }
                                    else
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        }
                        else
                        {
                            <span>@_lobby.Game.RemainingPass</span>
                        }
                    </div>
                    <div class="lobby-setting">
                        <span>Time For Speaker</span>
                        @if (_player.ID == _lobby.Admin.ID)
                        {
                            <select @onchange="async (ChangeEventArgs args) => { _lobby.Game.Counter = Convert.ToInt32(args.Value); await UpdateGameSetting(); }">
                                @foreach (var value in GameConfig.SelectCounter)
                                {
                                    if (value == GameConfig.SelectCounter[GameConfig.DefaultCounterIndex])
                                    {
                                        <option value="@value" selected>@value</option>
                                    }
                                    else
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        }
                        else
                        {
                            <span>@_lobby.Game.Counter s</span>
                        }
                    </div>
                    @if (!_showTeam1JoinBtn || !_showTeam2JoinBtn) // Herhangi bir takım seçmiş ise
                    {
                        @if (!_isReady)
                        {
                            <button id="ready-btn" @onclick=" async () => await CheckPlayersReady(true)">READY</button>
                        }
                        else
                        {
                            <button id="ready-btn" @onclick="async () => await CheckPlayersReady(false)">UNREADY</button>
                        }
                    }
                    else
                    {
                        <button id="ready-btn" disabled>READY</button>
                    }
                </fieldset>
            </div>
            <div id="lists">
                <table class="list-table">
                    <thead>
                        <tr>
                            <th>@_lobby.Team1.Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in _lobby.Team1.Players)
                        {
                            <tr>
                                <td>@player.Name</td>
                            </tr>
                        }
                        @if (_showTeam1JoinBtn)
                        {
                            <tr>
                                <td>
                                    <button class="join-btn" @onclick="async () => await ChangeTeam(_lobby.Team1,_lobby.Team2)">JOIN</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <table class="list-table">
                    <thead>
                        <tr>
                            <th>PLAYERS</th>
                            @if (_player.ID == _lobby.Admin.ID)
                            {
                                <th>ADMIN</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in _lobby.Players)
                        {
                            <tr>
                                <td>@player.Name</td>
                                @if (_player.ID == _lobby.Admin.ID)
                                {
                                    <td>
                                        <button id="kick-btn" @onclick="async () => await KickPlayer(player.ID)">KICK</button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <table class="list-table">
                    <thead>
                        <tr>
                            <th>@_lobby.Team2.Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in _lobby.Team2.Players)
                        {
                            <tr>
                                <td>@player.Name</td>
                            </tr>
                        }
                        @if (_showTeam2JoinBtn)
                        {
                            <tr>
                                <td>
                                    <button class="join-btn" @onclick="async() => await ChangeTeam(_lobby.Team2,_lobby.Team1)">JOIN</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (_screens == Screens.ROUND_START)
    {
        <div id="round-start">
            <div id="scoreboard">
                <div class="score">
                    <span>@_lobby.Team1.Name</span>
                    <span>@_lobby.Game.Team1Score</span>
                </div>
                <div class="score">VS</div>
                <div class="score">
                    <span>@_lobby.Team2.Name</span>
                    <span>@_lobby.Game.Team2Score</span>
                </div>
                <div class="number-of-win">
                    Number Of Win: @_lobby.Game.NumberOfWin
                </div>
            </div>
            <div class="next-round-info">
                <div>Next Round Team: @_lobby.Game.CurrentPlayingTeam.Name</div>
                <div>Next Round Narrator Player: @_lobby.Game.CurrentNarratorPlayer.Name</div>
                @if (_lobby.Admin.ID == _player.ID)
                {
                    <button @onclick="StartRound">Start Round</button>
                }
                @*<div id="round-start-counter">
                        Round starts in @_roundStartCounter second
                    </div>*@
            </div>
        </div>

    }
    else if (_screens == Screens.GAME)
    {
        <div id="game">
            <div id="game-header">
                <div id="scoreboard">
                    <div class="score">
                        <span>@_lobby.Team1.Name</span>
                        <span>@_lobby.Game.Team1Score</span>
                    </div>
                    <div class="score">VS</div>
                    <div class="score">
                        <span>@_lobby.Team2.Name</span>
                        <span>@_lobby.Game.Team2Score</span>
                    </div>
                    <div class="number-of-win">
                        Number Of Win: @_lobby.Game.NumberOfWin
                    </div>
                    <div id="counter">Time: @_gameCounter</div>
                </div>
            </div>
            <div id="game-body">
                <table class="list-table">
                    <thead>
                        <tr>
                            <th>@_lobby.Team1.Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in _lobby.Team1.Players)
                        {
                            <tr>
                                <td>@player.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (_player.ID == _lobby.Game.CurrentNarratorPlayer.ID || !_lobby.Game.CurrentPlayingTeam.Players.Contains(_player))
                {
                    <div id="word-card">
                        <div id="word-card-header">
                            <div id="word">
                                @_lobby.Game.WordCard.Word
                            </div>
                        </div>

                        <div id="word-card-body">
                            <ul>
                                @foreach (var forbiddenWord in @_lobby.Game.WordCard.ForbiddenWords)
                                {
                                    <li>@forbiddenWord</li>
                                }
                            </ul>
                        </div>

                        @if (!_lobby.Game.CurrentPlayingTeam.Players.Contains(_player))
                        {
                            <div id="word-card-controller">
                                <button id="true-btn" @onclick="async () => await RightGuessButton()">TRUE</button>
                                <button id="taboo-btn" @onclick="async () => await TabooButton()">TABOO</button>
                                <button id="pass-btn" @onclick="async () => await SkipWordButton()">PASS @_lobby.Game.RemainingPass</button>
                            </div>
                        }
                    </div>
                }
                <table class="list-table">
                    <thead>
                        <tr>
                            <th>@_lobby.Team2.Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in _lobby.Team2.Players)
                        {
                            <tr>
                                <td>@player.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else // _screens == Screens.GAME_OVER
    {
        <div id="game-over">
            <div id="scoreboard">
                <div class="score">
                    <span>@_lobby.Team1.Name</span>
                    <span>@_lobby.Game.Team1Score</span>
                </div>
                <div class="score">VS</div>
                <div class="score">
                    <span>@_lobby.Team2.Name</span>
                    <span>@_lobby.Game.Team2Score</span>
                </div>
                <div class="number-of-win">
                    Number Of Win: @_lobby.Game.NumberOfWin
                </div>
            </div>
            <div class="winner-info">
                <div>
                    Winner Team: @_lobby.Game.CurrentPlayingTeam.Name
                </div>
            </div>
            <button @onclick="()=>_screens = Screens.LOBBY">GO TO LOBBY</button>
        </div>
    }
</div>

@code{
    #region Variables
    #region UI
    private Screens _screens = Screens.LOGIN;
    private bool _showTeam1JoinBtn = true;
    private bool _showTeam2JoinBtn = true;
    private bool _isReady = false;
    private int _roundStartCounter = 0;
    private int _gameCounter = 0;
    #endregion
    private Player _player;
    private Lobby _lobby;
    private MyTimer _timer;

    #endregion

    #region Initialize
    private string _hubUrl;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Set variables
        _player = new Player();
        _lobby = new Lobby(_player);

        string baseUrl = navigationManager.BaseUri;
        _hubUrl = baseUrl.TrimEnd('/') + GameHub.url;
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<string>("GetPlayerID", (string id) => _player.ID = id);
        _hubConnection.On("Refresh", () => StateHasChanged());
        _hubConnection.On("RoundStart", () =>
        {
            SetScreen(Screens.ROUND_START);
        //_roundStartCounter = GameConfig.RoundStartCounter;
        //SetRoundStartCounter();
    });
        _hubConnection.On("StartRound", () =>
        {
            StartGame();
        });
        _hubConnection.On("LeavingPlayer", () =>
        {
            _lobby = new Lobby(_player);
            _showTeam1JoinBtn = true;
            _showTeam2JoinBtn = true;
            _isReady = false;
            SetScreen(Screens.LOGIN);
        });
        _hubConnection.On("LeaveLobby", () =>
        {
            _isReady = false;
            StateHasChanged();
        });
        _hubConnection.On("ClosedLobby", () =>
        {
            _lobby = new Lobby(_player);
            _showTeam1JoinBtn = true;
            _showTeam2JoinBtn = true;
            _isReady = false;
            SetScreen(Screens.LOGIN);
        });
        _hubConnection.On("GameOver", () =>
        {
            _isReady = false;
            SetScreen(Screens.GAMEOVER);
        });
        await _hubConnection.StartAsync();
    }
    #endregion

    private void SetScreen(Screens screen)
    {
        _screens = screen;
        StateHasChanged();
    }

    #region LOGIN LOBBY
    private async Task Play()
    {
        //TODO: Doğrulama için class oluştur
        if (true)
        {
            if (_lobby.ID == null || _lobby.ID == String.Empty) await CreateLobby();
            else await JoinLobby();
            SetScreen(Screens.LOBBY);
        }
    }
    private async Task CreateLobby()
    {
        _lobby = GameDatabase.Lobbies.CreateLobby(_player);
        await _hubConnection.InvokeAsync("CreateLobby", _lobby.Admin.ID, _lobby.ID);
    }
    private async Task JoinLobby()
    {
        _lobby = GameDatabase.Lobbies.JoinLobby(_player, _lobby.ID);
        await _hubConnection.InvokeAsync("JoinLobby", _player.ID, _lobby.ID);
    }
    #endregion

    #region LOBBY
    private async Task UpdateGameSetting() => await _hubConnection.InvokeAsync("UpdateGameSetting", _lobby.ID);
    private async Task ChangeTeam(Team newTeam, Team oldTeam)
    {
        _player.ChangeTeam(newTeam, oldTeam);
        if (newTeam == _lobby.Team1) { _showTeam1JoinBtn = false; _showTeam2JoinBtn = true; }
        else { _showTeam2JoinBtn = false; _showTeam1JoinBtn = true; }
        await _hubConnection.InvokeAsync("ChangeTeam", _lobby.ID);
    }
    private async Task CheckPlayersReady(bool isReady)
    {
        if (isReady)
        {
            _lobby.ReadyPlayers.Add(_player);
            if (_lobby.CheckArePlayersReady())
            {
                _lobby.ClearReadyPlayers();
                await _hubConnection.InvokeAsync("RoundStart", _lobby.ID/*, _lobby.Game.Counter*/);
            }
        }
        else _lobby.ReadyPlayers.Remove(_player);

        _isReady = isReady;
        StateHasChanged();
    }
    private async Task LeaveLobby()
    {
        if (_player.ID == _lobby.Admin.ID)
            await _hubConnection.InvokeAsync("ClosedLobby", _lobby.ID);
        else
            await _hubConnection.InvokeAsync("LeaveLobby", _player.ID, _lobby.ID);
    }
    private async Task KickPlayer(string playerID) => await _hubConnection.InvokeAsync("LeaveLobby", playerID, _lobby.ID);
    #endregion

    #region ROUND START
    //private void SetRoundStartCounter()
    //{
    //    _timer = new MyTimer(1000, _roundStartCounter, () =>
    //    {
    //        _roundStartCounter = _timer.Counter;
    //        InvokeAsync(StateHasChanged);
    //    }, StartGame);
    //    _timer.StartTimer();
    //}
    private async Task StartRound() // Buton için
    {
        await _hubConnection.InvokeAsync("StartRound", _lobby.ID, _lobby.Game.Counter);
    }
    #endregion

    #region GAME
    private void StartGame()
    {
        SetGameCounter();
        InvokeAsync(() => SetScreen(Screens.GAME));
    }
    private void SetGameCounter()
    {
        _gameCounter = _lobby.Game.Counter;
        _timer = new MyTimer(1000, _gameCounter, () =>
        {
            _gameCounter = _timer.Counter;
            InvokeAsync(StateHasChanged);
        });
        _timer.StartTimer();
    }
    #endregion

    #region WORD CARD CONTROLLER
    private async Task RightGuessButton()
    {
        _lobby.Game.RightGuess();
        await NewWord();
    }
    private async Task TabooButton()
    {
        _lobby.Game.TabooWord();
        await NewWord();
    }
    private async Task SkipWordButton()
    {
        _lobby.Game.SkipWord();
        await NewWord();
    }
    private async Task NewWord() => await _hubConnection.InvokeAsync("NewWord", _lobby.ID);
    #endregion

    #region TASK LIST
    // TODO: Validate class oluştur login ekranında, yeni bir lobi oluştururken ve lobiye giriş yaparken kontrol et.
    #endregion
}