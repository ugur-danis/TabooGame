@inject NavigationManager navigationManager
@page "/"
@page "/Game"
@* LOGIN *@
@if (!_isLogin)
{
    <div id="login">

        <div id="login-inputs">
            <input type="text" id="player-name" placeholder="Player Name" @bind="_player.Name">
        </div>

        <div id="login-btns">
            <button id="join-lobby" @onclick="JoinLobby">Join Lobby</button>
        </div>
    </div>
}


@* LOBBY *@
else if (!_isGameStart)
{
    <div class="container">
        <div id="game-controller">
            @if (!_player.IsReady && _player.Team != Teams.None)
            {
                <button class="start-game" @onclick="Ready">Ready</button>
            }
            else if (_player.Team != Teams.None)
            {
                <button class="start-game" @onclick="Unready">Unready</button>
            }
        </div>
        <div id="teams">
            <div id="team1-list">
                <table>
                    <thead>
                        <tr>
                            <th>Team 1</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (GameDatabase.GameManager.GetTeam(Teams.Team1).Players.Count > 0)
                            @foreach (var player in GameDatabase.GameManager.GetTeam(Teams.Team1).Players)
                            {
                                <tr>
                                    <td>@player.Name</td>
                                </tr>
                            }
                        @if (!_isJoinTeam1)
                        {
                            <tr>
                                <td>
                                    <button class="join-team-btn" @onclick="(() => JoinTeam(Teams.Team1))">Join</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div id="players-list">
                <table>
                    <thead>
                        <tr>
                            <th>Players List</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (GameDatabase.GetPlayers().Count > 0)
                            @foreach (var player in GameDatabase.GetPlayers())
                            {
                                <tr>
                                    <td>@player.Name</td>
                                </tr>
                            }
                    </tbody>
                </table>
            </div>
            <div id="team2-list">
                <table>
                    <thead>
                        <tr>
                            <th>Team 2</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (GameDatabase.GameManager.GetTeam(Teams.Team2).Players.Count > 0)
                            @foreach (var player in GameDatabase.GameManager.GetTeam(Teams.Team2).Players)
                            {
                                <tr>
                                    <td>@player.Name</td>
                                </tr>
                            }
                        @if (!_isJoinTeam2)
                        {
                            <tr>
                                <td>
                                    <button class="join-team-btn" @onclick="(() => JoinTeam(Teams.Team2))">Join</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


@* GAME *@
else if (_isLogin)
{
    <div class="container">
        <div id="game">
            <div class="scoreboard">
                <span class="scoreboard-title">Scoreboard</span>
                <div id="scores">
                    <span>@GameDatabase.GameManager.Team1Name:</span>
                    <span>@GameDatabase.GameManager.Team1Score</span>
                    <span>VS</span>
                    <span>@GameDatabase.GameManager.Team2Name: </span>
                    <span>@GameDatabase.GameManager.Team2Score</span>
                </div>
                <div class="number-of-win">
                    <span>Number of win:</span>
                    <span id="win-number">@GameDatabase.GameManager.NumberOfWin</span>
                </div>
            </div>
            @if (!GameDatabase.GameManager.IsRounEnd)
            {
                @if (GameDatabase.GameManager.IsOpponentPlayer(_player) || GameDatabase.GameManager.IsSpeakerPlayer(_player))
                {
                    <div id="word-card">
                        <div class="word-card-header">
                            <span id="word">@GameDatabase.GameManager.WordCard.Word</span>
                            <span id="counter">@_countdown</span>
                        </div>
                        <div class="word-card-boady">
                            <ul>
                                @foreach (var item in @GameDatabase.GameManager.WordCard.ForbiddenWords)
                                {
                                    <li>@item</li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @if (GameDatabase.GameManager.IsOpponentPlayer(_player))
                {
                    <div id="word-controller">
                        <button class="word-controller-btn" id="true">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="word-controller-btn" id="taboo">
                            <i class="fas fa-times"></i>
                            <span>@GameDatabase.GameManager.RightToTaboo</span>
                        </button>
                        <button class="word-controller-btn" id="pass">
                            <i class="fas fa-arrow-right"></i>
                            <span>@GameDatabase.GameManager.RightToPass</span>
                        </button>
                    </div>
                }
            }
        </div>
    </div>
}


@code{
    #region Variables
    private string _hubUrl;
    private HubConnection _hubConnection;

    private Player _player = new Player();

    private bool _isLogin = false;
    private bool _isGameStart = false;
    private bool _isJoinTeam1 = false;
    private bool _isJoinTeam2 = false;

    private int _countdown = GameDatabase.GameManager.GetCountdown;
    #endregion

    #region Initialize
    protected override async Task OnInitializedAsync()
    {
        string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + GameHub.url;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();


        _hubConnection.On("GetPlayerID", (string id) => _player.ID = id);
        _hubConnection.On("JoinLobby", () =>
        {
            _player = GameDatabase.GetPlayer(_player.ID);
            _isLogin = true;
            StateHasChanged();
        });

        _hubConnection.On("JoinTeam", () => { StateHasChanged(); });
        _hubConnection.On("GameStart", () => { _isGameStart = true; StateHasChanged(); Countdowner(); });
        _hubConnection.On("TimeEnd", () => { _isGameStart = false; StateHasChanged(); });

        await _hubConnection.StartAsync();
    }
    #endregion

    #region LOGIN
    private void JoinLobby()
    {
        _hubConnection.InvokeAsync("JoinLobby", _player);
    }
    #endregion

    #region LOBBY
    private void JoinTeam(Teams team)
    {
        if (team == Teams.Team1) { _isJoinTeam1 = true; _isJoinTeam2 = false; }
        else if (team == Teams.Team2) { _isJoinTeam2 = true; _isJoinTeam1 = false; }

        _player.Team = team;
        _hubConnection.InvokeAsync("JoinTeam", _player);
    }

    private void Ready()
    {
        _player.IsReady = true;
        _hubConnection.InvokeAsync("GameStart");
    }

    private void Unready()
    {
        _player.IsReady = false;
    }
    #endregion

    #region GAME
    private void Countdowner()
    {
        while (_countdown > 0)
        {
            System.Threading.Thread.Sleep(1000);
            _countdown--;
            StateHasChanged();
        }

        _hubConnection.InvokeAsync("TimeEnd");
    }
    #endregion
}




